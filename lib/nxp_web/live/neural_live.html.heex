<div class="relative grid grid-cols-1 lg:grid-cols-3 gap-6">

  <div class="lg:col-span-2">

    <div class="mb-6 p-4 bg-gray-50 border-l-4 border-blue-400 shadow-sm rounded">
      <h1 class="text-2xl font-bold mb-2">🧩 Neural Networks — Interactive Primer</h1>
      <p class="text-sm text-gray-700">
        Explore a tiny feed-forward network: tweak layers and hyperparameters, run a forward pass, and step training to see loss evolve.  (This is a teaching demo—math is simplified.)
      </p>
    </div>

    <section class="mb-6 p-4 bg-white rounded-lg shadow">
      <h1 class="text-2xl font-bold mb-2">🧠 How Neural Networks Learn</h1>
      <p class="text-gray-700 mb-4">
        A <strong>neural network</strong> is a set of connected “neurons” that transform inputs into outputs through weighted sums
        and non-linear activations. By adjusting the <em>weights</em> over many examples, the network learns to map inputs to
        desired outputs.
      </p>
      <ul class="list-disc list-inside text-gray-700 space-y-1 mb-4">
        <li><strong>Forward pass:</strong> Inputs flow through layers, each applying weights, biases, and activation functions to produce predictions. </li>
        <li><strong>Loss function:</strong> Measures how far predictions are from the correct answers. </li>
        <li><strong>Backpropagation:</strong> Calculates how each weight contributed to the error. </li>
        <li><strong>Gradient descent:</strong> Updates weights in the direction that reduces the error.</li>
      </ul>
      <p class="text-gray-700">
        With repeated training cycles, the network’s decision boundary shifts to separate classes more accurately. In this demo, you’ll see how even a small network can learn to distinguish points in 2D space.
      </p>
    </section>

    <div class="p-4 border rounded-md mb-6">
      <h3 class="font-semibold mb-2">⚙️ Hyperparameters</h3>

      <div class="mb-3">
        <label class="block text-sm mb-1">Activation</label>
        <form phx-change="change_hparam">
          <select name="value" class="border rounded px-2 py-1" phx-value-field="activation">
            <option value="relu" selected>ReLU</option>
            <option value="sigmoid">Sigmoid</option>
            <option value="tanh">tanh</option>
          </select>
        </form>
      </div>

      <div class="mb-3">
        <label class="block text-sm mb-1">Learning Rate</label>
        <form phx-change="change_hparam">
          <input
            type="number"
            step="0.01"
            min="0.0"
            name="value"
            value={@learning_rate}
            class="border rounded px-2 py-1 w-28"
            phx-value-field="learning_rate"
          />
        </form>
      </div>

      <div class="mb-3">
        <label class="block text-sm mb-1">Hidden Neurons</label>
        <form phx-change="change_layers">
          <input
            type="number"
            name="hidden"
            min="1"
            value={Enum.at(@layers, 1)}
            class="border rounded px-2 py-1 w-28"
          />
        </form>
        <p class="text-xs text-gray-500 mt-1">
          Architecture: <code>[{Enum.join(@layers, ", ")}]</code>
        </p>
      </div>

      <div class="flex gap-2 mt-4">
        <button
          phx-click="randomize_data"
          class="bg-gray-600 hover:bg-gray-700 text-white text-sm font-semibold px-3 py-2 rounded"
        >
          🎲 Randomize Data
        </button>
        <button
          phx-click="reset_model"
          class="bg-amber-600 hover:bg-amber-700 text-white text-sm font-semibold px-3 py-2 rounded"
        >
          ♻️ Reset Model
        </button>
      </div>

      <div class="flex gap-2 mt-3">
        <button
          phx-click="forward"
          class="bg-blue-600 hover:bg-blue-700 text-white text-sm font-semibold px-3 py-2 rounded"
        >
          ▶️ Forward Pass
        </button>
        <button
          phx-click="train_step"
          class="bg-green-600 hover:bg-green-700 text-white text-sm font-semibold px-3 py-2 rounded"
        >
          🔁 Train Step
        </button>
      </div>

      <div class="mt-4 text-sm">
        <div><span class="font-semibold">Epoch:</span> {@epoch}</div>
        <div><span class="font-semibold">Loss:</span> {@loss}</div>
      </div>
    </div>

    <div class="space-y-6">

      <div class="p-4 border rounded-md">
        <h3 class="font-semibold mb-2">📈 Toy Dataset</h3>
        <p class="text-xs text-gray-500 mb-3">
          Points are in 2D; label is based on a simple rule (outside vs. inside a radius).
        </p>
        <div class="grid grid-cols-2 gap-2 text-xs">
          <%= for %{x: x, y: y, label: lbl} <- Enum.take(@dataset, 12) do %>
            <div class="border rounded px-2 py-1 bg-gray-50">
              (x={x}, y={y}) →
              <span class={"font-semibold #{if lbl == 1, do: "text-rose-600", else: "text-sky-700"}"}>
                {lbl}
              </span>
            </div>
          <% end %>
        </div>
        <p class="text-[11px] text-gray-500 mt-2">Showing first 12 / {length(@dataset)} points.</p>
      </div>

      <div class="p-4 border rounded-md">
        <h3 class="font-semibold mb-2">🧮 Forward Pass (Predictions)</h3>
        <p class="text-xs text-gray-500 mb-3">
          These are toy probabilities from a simplified forward pass (not a trained model yet).
        </p>
        <div class="grid grid-cols-2 gap-2 text-xs">
          <%= for {p, i} <- Enum.with_index(Enum.take(@predictions, 12)) do %>
            <div class="border rounded px-2 py-1 bg-white">
              p({i}) = {p}
            </div>
          <% end %>
        </div>
        <%= if @loss do %>
          <p class="text-sm mt-3"><span class="font-semibold">Current loss:</span> {@loss}</p>
        <% end %>
      </div>

      <div class="p-4 border rounded-md">
        <h3 class="font-semibold mb-2">🧪 Training Curve (Toy)</h3>
        <p class="text-xs text-gray-500 mb-3">
          Each “Train Step” appends a new (noisy, decreasing) loss value to illustrate optimization.
        </p>
        <div class="text-xs grid grid-cols-6 gap-2">
          <%= for {val, i} <- Enum.with_index(@loss_history) do %>
            <div class="px-2 py-1 border rounded bg-gray-50">e={i} → {val}</div>
          <% end %>
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8">
      <div class="p-4 border rounded-md">
        <h3 class="font-semibold mb-2">🎯 Ground Truth (Labels)</h3>
        <svg viewBox="0 0 320 320" class="w-full h-auto bg-white rounded border">
          <line x1="160" y1="0" x2="160" y2="320" stroke="#e5e7eb" />
          <line x1="0" y1="160" x2="320" y2="160" stroke="#e5e7eb" />

          <%= for p <- @dataset do %>
            <% {cx, cy} = NxpWeb.NeuralLive.to_screen({p.x, p.y}) %>
            <circle
              cx={cx}
              cy={cy}
              r="3.5"
              fill={NxpWeb.NeuralLive.label_color(p.label)}
              fill-opacity="0.9"
            />
          <% end %>
        </svg>
        <p class="text-xs text-gray-500 mt-2">Blue=class 0, Red=class 1</p>
      </div>

      <div class="p-4 border rounded-md">
        <h3 class="font-semibold mb-2">🧠 Model Prediction (Heatmap + Points)</h3>
        <svg viewBox="0 0 320 320" class="w-full h-auto bg-white rounded border">
          <%= for cell <- @boundary do %>
            <% {sx, sy} = to_screen({cell.x, cell.y}) %>
            <% {r, g, b, a} = prob_rgba(cell.p) %>
            <rect
              x={sx - 4.5}
              y={sy - 4.5}
              width="9"
              height="9"
              fill={"rgb(#{r},#{g},#{b})"}
              fill-opacity={a}
              stroke="none"
            />
          <% end %>

          <%= for {p, i} <- Enum.with_index(@dataset) do %>
            <% prob = Enum.at(@predictions || [], i) || if p.label == 1, do: 1.0, else: 0.0 %>
            <% {cx, cy} = to_screen({p.x, p.y}) %>
            <% {r, g, b, a} = prob_rgba(prob) %>
            <circle
              cx={cx}
              cy={cy}
              r="3.5"
              fill={"rgb(#{r},#{g},#{b})"}
              fill-opacity={a}
              stroke="#111827"
              stroke-width="0.4"
            />
          <% end %>
        </svg>
        <p class="text-xs text-gray-500 mt-2">
          Green intensity ≈ model p(class=1). Click <em>Forward Pass</em>
          or <em>Train Step</em> to update.
        </p>
      </div>
    </div>
  </div>

  <div class="lg:col-span-1 lg:sticky lg:top-0 lg:h-screen lg:overflow-y-auto p-4">
    <div class="p-4 border rounded-md shadow bg-white">
      <h3 class="font-semibold mb-2">📈 Training Flow</h3>
      <div id="training-flow-chart" class="mermaid-container" phx-hook="Mermaid">
        <pre>
          graph TD
            A[Inputs] --> B(Forward Pass);
            B --> C[Predictions];
            C --> D(Loss Function);
            D --> E[Loss Value];
            E --> F(Backpropagation);
            F --> G[Gradients];
            G --> H(Gradient Descent);
            H --> I[Update Weights & Biases];
            I --> B;
        </pre>
      </div>
    </div>
  </div>
</div>
